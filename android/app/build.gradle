apply plugin: "com.android.application"
apply plugin: 'io.fabric'

repositories {
  maven { url 'https://maven.fabric.io/public' }
  maven {
        url "https://repo.eclipse.org/content/repositories/paho-releases/"
    }
}
import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"]
 * ]
 */

project.ext.vectoricons = [
    iconFontNames: [ 'Ionicons.ttf' ] // Name of the font files you want to copy
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def generatedVersionCode = 4

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    //method used to increment version code on assembleRelease
    ext.incrementVersionCode = {
      def versionPropsFile = file('version.properties')
      def increaseBy = 1
      if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        generatedVersionCode = versionProps['VERSION_CODE'].toInteger() + increaseBy
        println(":incrementVersionCode - Incrementing Version Code...")
        versionProps['VERSION_CODE'] = generatedVersionCode.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
      } else {
            throw new GradleException("Could not read version.properties!")
      }
    }

    defaultConfig {
        applicationId "com.boundlessgeo.efc"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode generatedVersionCode
        versionName "1.8.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            storeFile file(SC_RELEASE_STORE_FILE)
            storePassword SC_RELEASE_STORE_PASSWORD
            keyAlias SC_RELEASE_KEY_ALIAS
            keyPassword SC_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    // check if the assembleRelease task is among the tasks to be executed
    gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
        incrementVersionCode()
    }
}
    packagingOptions {
      exclude 'META-INF/LICENSE'
      exclude 'META-INF/NOTICE'
      pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-core/pom.xml'
      pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-core/pom.properties'
      pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-databind/pom.xml'
      pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-databind/pom.properties'
      pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-annotations/pom.xml'
      pickFirst 'META-INF/maven/com.fasterxml.jackson.core/jackson-annotations/pom.properties'
      pickFirst 'META-INF/maven/commons-io/commons-io/pom.xml'
      pickFirst 'META-INF/maven/commons-io/commons-io/pom.properties'
    }

    dexOptions {
        javaMaxHeapSize "4g"
        javaMaxHeapSize "4g"
    }

}

dependencies {
    compile project(':react-native-image-picker')
    compile(project(':react-native-maps')){
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }
    compile 'com.google.android.gms:play-services-base:10.2.6'
    compile 'com.google.android.gms:play-services-maps:10.2.6'
    compile project(':react-native-spatialconnect')
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile "com.android.support:multidex:1.0.0"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.1@aar') {
      transitive = true;
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}
